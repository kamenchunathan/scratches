// ⚠️ GENERATED CODE ⚠️ - this entire file was generated by the `roc glue` CLI command

#![allow(unused_unsafe)]
#![allow(dead_code)]
#![allow(unused_mut)]
#![allow(non_snake_case)]
#![allow(non_camel_case_types)]
#![allow(non_upper_case_globals)]
#![allow(clippy::undocumented_unsafe_blocks)]
#![allow(clippy::redundant_static_lifetimes)]
#![allow(clippy::unused_unit)]
#![allow(clippy::missing_safety_doc)]
#![allow(clippy::let_and_return)]
#![allow(clippy::missing_safety_doc)]
#![allow(clippy::needless_borrow)]
#![allow(clippy::clone_on_copy)]
#![allow(clippy::non_canonical_partial_ord_impl)]

use roc_std::roc_refcounted_noop_impl;
use roc_std::RocBox;
use roc_std::RocRefcounted;

#[derive(Clone, Default, Debug, PartialEq, PartialOrd, Eq, Ord, Hash)]
#[repr(transparent)]
pub struct Event {
    pub r#type: roc_std::RocStr,
}

impl roc_std::RocRefcounted for Event {
    fn inc(&mut self) {
        self.r#type.inc();
    }
    fn dec(&mut self) {
        self.r#type.dec();
    }
    fn is_refcounted() -> bool {
        true
    }
}

#[derive(Clone, Copy, PartialEq, PartialOrd, Eq, Ord, Hash)]
#[repr(u64)]
pub enum U1 {
    C18_5 = 0,
}

impl core::fmt::Debug for U1 {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        match self {
            Self::C18_5 => f.write_str("U1::C18_5"),
        }
    }
}

roc_refcounted_noop_impl!(U1);

#[repr(C)]
#[derive(Debug)]
pub struct RocFunction_82 {
    closure_data: Vec<u8>,
}

#[repr(C)]
pub struct Msg {
    _data: (),
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl RocFunction_82 {
    pub fn force_thunk(mut self, arg0: Event) -> RocBox<()> {
        extern "C" {
            fn roc__setup_callback_for_host_0_caller(
                arg0: *const Event,
                closure_data: *mut u8,
                output: *mut RocBox<()>,
            );
        }

        let mut output = core::mem::MaybeUninit::uninit();

        unsafe {
            roc__setup_callback_for_host_0_caller(
                &arg0,
                self.closure_data.as_mut_ptr(),
                output.as_mut_ptr(),
            );

            output.assume_init()
        }
    }
}
roc_refcounted_noop_impl!(RocFunction_82);

pub fn setup_callback_for_host(arg0: i32) -> RocFunction_82 {
    extern "C" {
        fn roc__setup_callback_for_host_1_exposed_generic(_: *mut u8, _: i32);
        fn roc__setup_callback_for_host_1_exposed_size() -> i64;
    }

    unsafe {
        let capacity = roc__setup_callback_for_host_1_exposed_size() as usize;

        let mut ret = RocFunction_82 {
            closure_data: Vec::with_capacity(capacity),
        };
        ret.closure_data.resize(capacity, 0);

        roc__setup_callback_for_host_1_exposed_generic(ret.closure_data.as_mut_ptr(), arg0);

        ret
    }
}

pub fn handle_callback_for_host(arg0: RocBox<()>) -> () {
    extern "C" {
        fn roc__handle_callback_for_host_1_exposed_generic(_: *mut (), _: RocBox<()>);
    }

    let mut ret = core::mem::MaybeUninit::uninit();

    unsafe {
        roc__handle_callback_for_host_1_exposed_generic(ret.as_mut_ptr(), arg0);

        ret.assume_init()
    }
}

